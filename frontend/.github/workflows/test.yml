name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  POSTGRES_DB: test_job_lander
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_job_lander

jobs:
  # Unit and Integration Tests
  test-unit-integration:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_job_lander
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "DATABASE_URL=${{ env.DATABASE_URL }}" >> .env.test

      - name: Setup test database
        run: |
          npm run db:push
        env:
          NODE_ENV: test
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Type check
        run: npm run check

      - name: Run unit tests
        run: npm run test:unit
        env:
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Generate coverage report
        run: npm run test:coverage
        env:
          NODE_ENV: test
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-unit-integration
          path: |
            tests/reports/
            coverage/
          retention-days: 7

  # End-to-End Tests
  test-e2e:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_job_lander
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "DATABASE_URL=${{ env.DATABASE_URL }}" >> .env.test

      - name: Setup test database
        run: npm run db:push
        env:
          NODE_ENV: test
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Build application
        run: npm run build

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          NODE_ENV: test
          DATABASE_URL: ${{ env.DATABASE_URL }}
          PLAYWRIGHT_BASE_URL: http://localhost:5173

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: |
            tests/reports/e2e/
            tests/reports/test-results/
          retention-days: 7

  # Security Tests
  test-security:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Run dependency vulnerability check
        uses: actions/dependency-review-action@v3

      - name: Run CodeQL analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript,typescript

      - name: Perform CodeQL analysis
        uses: github/codeql-action/analyze@v2

  # Performance Tests
  test-performance:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_job_lander
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "DATABASE_URL=${{ env.DATABASE_URL }}" >> .env.test

      - name: Setup test database
        run: npm run db:push
        env:
          NODE_ENV: test
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Build application
        run: npm run build

      - name: Run performance tests
        run: npm run test:performance
        env:
          NODE_ENV: test
          DATABASE_URL: ${{ env.DATABASE_URL }}

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-results
          path: tests/reports/performance/
          retention-days: 30

  # Blockchain Tests (only on AWS-related changes)
  test-blockchain:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[blockchain]') || contains(github.event.head_commit.modified, 'amplify/') || contains(github.event.head_commit.modified, 'blockchain')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Run blockchain migration tests
        run: npm run test:blockchain
        env:
          NODE_ENV: test
          AWS_REGION: us-east-1
          ENVIRONMENT: test

  # Lint and Format Check
  lint-and-format:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint (if configured)
        run: |
          if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ] || [ -f "eslint.config.js" ]; then
            npm run lint
          else
            echo "No ESLint configuration found, skipping"
          fi
        continue-on-error: true

      - name: Check Prettier formatting (if configured)
        run: |
          if [ -f ".prettierrc" ] || [ -f "prettier.config.js" ]; then
            npm run format:check
          else
            echo "No Prettier configuration found, skipping"
          fi
        continue-on-error: true

      - name: Check TypeScript compilation
        run: npm run check

  # Build Test
  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Build backend
        run: npm run build:backend

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
            client/dist/
          retention-days: 7

  # Test Summary
  test-summary:
    runs-on: ubuntu-latest
    needs: [test-unit-integration, test-e2e, test-security, lint-and-format, build-test]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate test summary
        run: |
          echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.test-unit-integration.result }}" == "success" ]; then
            echo "✅ Unit & Integration Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Unit & Integration Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.test-e2e.result }}" == "success" ]; then
            echo "✅ End-to-End Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ End-to-End Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.test-security.result }}" == "success" ]; then
            echo "✅ Security Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Security Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.lint-and-format.result }}" == "success" ]; then
            echo "✅ Code Quality: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Code Quality: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.build-test.result }}" == "success" ]; then
            echo "✅ Build Test: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Build Test: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "Coverage reports are available in the artifacts section." >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎭 E2E Test Videos" >> $GITHUB_STEP_SUMMARY
          echo "Test failure videos and screenshots are available in the Playwright report artifact." >> $GITHUB_STEP_SUMMARY

      - name: Check overall result
        if: needs.test-unit-integration.result != 'success' || needs.test-e2e.result != 'success' || needs.test-security.result != 'success' || needs.build-test.result != 'success'
        run: |
          echo "❌ Some tests failed. Please check the individual job results."
          exit 1