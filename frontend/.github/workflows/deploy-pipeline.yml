name: Deploy Pipeline

on:
  push:
    branches: [main]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'

jobs:
  # Pre-deployment Tests
  pre-deploy-tests:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run critical tests
        run: |
          npm run test:unit
          npm run check
          npm run build

      - name: Check deployment conditions
        id: check
        run: |
          # Only deploy if all tests pass and this is a main branch push or manual trigger
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]] || [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: pre-deploy-tests
    if: needs.pre-deploy-tests.outputs.should-deploy == 'true' && (github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'))
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: |
          npm run build
          npm run build:backend

      - name: Configure AWS credentials for staging
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: us-east-1

      - name: Deploy to Amplify Staging
        run: |
          # Deploy to staging branch
          npx @aws-amplify/cli publish --yes
        env:
          AWS_REGION: us-east-1
          AMPLIFY_APP_ID: ${{ secrets.AMPLIFY_APP_ID_STAGING }}

      - name: Run database migrations (staging)
        run: |
          npm run db:push
        env:
          NODE_ENV: staging
          DATABASE_URL: ${{ secrets.DATABASE_URL_STAGING }}

      - name: Run post-deployment tests
        run: |
          # Wait for deployment to be ready
          sleep 30
          
          # Run smoke tests against staging
          npm run test:smoke -- --baseURL="${{ secrets.STAGING_URL }}"

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: '🚀 Successfully deployed to staging environment'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: '❌ Staging deployment failed'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [pre-deploy-tests, deploy-staging]
    if: needs.pre-deploy-tests.outputs.should-deploy == 'true' && (startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'))
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: |
          npm run build
          npm run build:backend

      - name: Configure AWS credentials for production
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PRODUCTION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PRODUCTION }}
          aws-region: us-east-1

      - name: Create deployment backup
        run: |
          # Create backup of current production state
          aws amplify get-app --app-id ${{ secrets.AMPLIFY_APP_ID_PRODUCTION }} > backup-app-config.json
          
          # Backup database (if applicable)
          # pg_dump ${{ secrets.DATABASE_URL_PRODUCTION }} > backup-db-$(date +%Y%m%d-%H%M%S).sql

      - name: Deploy to Amplify Production
        run: |
          # Deploy to main branch
          npx @aws-amplify/cli publish --yes
        env:
          AWS_REGION: us-east-1
          AMPLIFY_APP_ID: ${{ secrets.AMPLIFY_APP_ID_PRODUCTION }}

      - name: Run database migrations (production)
        run: |
          # Run migrations with extra caution
          npm run db:push
        env:
          NODE_ENV: production
          DATABASE_URL: ${{ secrets.DATABASE_URL_PRODUCTION }}

      - name: Setup blockchain resources (if needed)
        run: |
          # Setup blockchain resources for production
          if [ "${{ secrets.SETUP_BLOCKCHAIN }}" == "true" ]; then
            ENVIRONMENT=prod npm run setup:blockchain
          fi
        env:
          AWS_REGION: us-east-1
          ENVIRONMENT: prod

      - name: Run post-deployment verification
        run: |
          # Wait for deployment to be ready
          sleep 60
          
          # Run comprehensive verification tests
          npm run test:smoke -- --baseURL="${{ secrets.PRODUCTION_URL }}"
          npm run test:blockchain -- --env=production

      - name: Notify production deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: '🎉 Successfully deployed to production environment!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify production deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: '🚨 PRODUCTION DEPLOYMENT FAILED - Immediate attention required!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}